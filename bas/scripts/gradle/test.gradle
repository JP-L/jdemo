/*
 * Test configuration
 */

/* ==== Apply plugins ==== */
apply plugin: "net.saliman.cobertura"
apply plugin: "org.sonarqube"

/* ===== Unit testing ===== */
test {
    reports.junitXml.destination = "${projectDir}/shippable/testresults"  
    reports.html.destination = "${projectDir}/shippable/testresults"
}
// ===== Code Coverage Analysis =====
cobertura {
    coverageFormats = ['html', 'xml']				
    coverageReportDir = file("${projectDir}/shippable/codecoverage")	
}
test.finalizedBy(project.tasks.cobertura)

/* ===== Static Code Analysis ===== */
sonarqube {
  properties {
    property "sonar.projectName", "${name}"
    property "sonar.projectKey", "org.sonarqube:jdemo"
    property "sonar.cobertura.reportPath","${projectDir}/shippable/codecoverage/coverage.xml"
    property "sonar.junit.reportsPath","${projectDir}/shippable/testresults"
  }
}

/* ===== CodeCoverage.io ===== */
task codeCovIO(type: Exec) {
    commandLine "/bin/bash", "-c", "bash <(curl -s https://codecov.io/bash) -f ./shippable/codecoverage/coverage.xml"
    ignoreExitValue true
    doLast {
    	def msg = (execResult == 0) ? "SUCCESS: Upload to codeCovIO" : "FAILED: Upload to codeCovIO"
        println "${msg}"
    }
}

task inspectQuality(type: GradleBuild) {
    tasks = ['test', 'cobertura', 'sonarqube', 'codeCovIO']
}

task runFunctionalAndIntegrationTests(type: Exec) {
    dependsOn startDockerContainer
    finalizedBy stopDockerContainer
    commandLine "/bin/bash", "-c", "${projectDir}/src/test/docker/dockerFunctionalTests.sh"
	ignoreExitValue true
	doLast {
    	def msg = (execResult == 0) ? "SUCCESS: Functional tests" : "FAILED: Functional tests"
        println "${msg}"
    }
}
task runAcceptanceAndSmokeTests(type: Exec) << {
	//dependsOn .... releaseCI -> probably this becomes a shippable Job
}

/*
 * In this section declare the dependencies for production and test code
 */
dependencies {
    // Declare the dependency for a test framework to use in the tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile 'org.hamcrest:hamcrest-junit:2.0.0.0'
    testCompile group: 'info.cukes', name: 'cucumber-java', version: '1.2.+'
    testCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.+'	    
}
