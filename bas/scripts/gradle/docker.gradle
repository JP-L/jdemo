/*
 * Copyright (c) 2018 JP-L, https://www.jp-l.org/
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Docker configuration
 */
buildscript {
    repositories {
    	jcenter()
        // Activate below when using Artifacotry or Nexus
        //maven {
	    //    url "${binrepo_url}/jcenter/"
	    //    credentials {
	    //   		username "${binrepo_user}"
	    //   		password "${binrepo_password}"
	    //	}
	    //}
    }
    dependencies {
        classpath "com.bmuschko:gradle-docker-plugin:3.2.3"
    }
}

/* ==== Apply plugins ==== */

// use fully qualified class name
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

/* ===== Docker configuration ===== */
def dockerRepo = "${binrepo_registryUrl}"

docker {
    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp","https")
        
        if (System.env.DOCKER_CERT_PATH) {
            certPath = new File(System.env.DOCKER_CERT_PATH)
        }
    }
    else {
        url = 'unix:///var/run/docker.sock'
    }
    																	       
    registryCredentials {
        url = "${binrepo_registryUrl}"
        username = "${binrepo_user}"
        password = "${binrepo_password}"
        email = "${binrepo_email}"
    }
}

task copyFiles(type: Copy) {
    from        "${getProject().getBuildDir()}/libs/"
    from        "${projectDir}/src/main/docker/Dockerfile"
    from		"${projectDir}/src/main/resources/docker/setenv.sh"
    into        "${getProject().getBuildDir()}/docker"
}
/* ===== Docker Image tasks ==== */
task createDockerImage(type: DockerBuildImage) {
	group "Docker"
    dependsOn   'copyFiles'
    inputDir = file("${getProject().getBuildDir()}/docker")
    tags = ["${dockerRepo}".toString() + '/' + "${getProject().getName()}".toString() + ':latest']
}
task pushDockerImage(type: DockerPushImage) {
	group "Docker"
    dependsOn createDockerImage
    imageName = "${dockerRepo}/${getProject().getName()}"
    tag = 'latest' //"${getProject().getVersion()}"
}

/* ===== Docker Container tasks ==== */
task createDockerContainer(type: DockerCreateContainer) {
	group "Docker"
    dependsOn createDockerImage
    targetImageId { createDockerImage.getImageId() }
    portBindings = ['8080:8080']
}
task startDockerContainer(type: DockerStartContainer) {
	group "Docker"
    dependsOn createDockerContainer
    targetContainerId { createDockerContainer.getContainerId() }
}
task stopDockerContainer(type: DockerStopContainer) {
	group "Docker"
    targetContainerId { createDockerContainer.getContainerId() }
}
