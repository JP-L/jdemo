/*
 * Copyright (c) 2018 JP-L, https://www.jp-l.org/
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Provision IaaS configuration
 */

task cleanTF(type: Delete) {
	group "Terraform"
	delete "${projectDir}/tf-temp"
	followSymlinks = true
}
task copyTFfiles(type: Copy) {
    description "Copy all relevant Terraform files into a single directory, to process further"
    group "Terraform"
    dependsOn cleanTF
    outputs.upToDateWhen { false }
    from		"${projectDir}/${terraform_path}"
    from		"${projectDir}/src/main/terraform"
    from		"${projectDir}/src/main/resources/terraform"
    into        "${projectDir}/tf-temp"
}
task prepareTF {
	description "Prepare TF"
    group "Terraform"
    dependsOn copyTFfiles
    doLast {
    	new File("${projectDir}/tf-temp/credentials").text = """
[default]
aws_access_key_id = "${terraform_accessKeyId}"
aws_secret_access_key = "${terraform_secretAccessKey}"
"""
    }
}
task initTerraform(type: Exec) {
	description "Terraform init"
	group "Terraform"
	dependsOn prepareTF
	workingDir "/home/limpens/Development/akagi/tf-temp/"
    commandLine "/bin/bash", "-c", "./terraform init -input=false"
    //ignoreExitValue true
    
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
		return standardOutput.toString()
	}
}
task planTerraform(type: Exec) {
	description "Terraform plan"
	group "Terraform"
	dependsOn initTerraform
	workingDir "/home/limpens/Development/akagi/tf-temp/"
    commandLine "/bin/bash", "-c", "./terraform plan -out ${terraform_plan} -input=false"
    //ignoreExitValue true
    
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
		return standardOutput.toString()
	}
}
task applyTerraform(type: Exec) {
	description "Terraform apply"
	group "Terraform"
	dependsOn planTerraform
	workingDir "/home/limpens/Development/akagi/tf-temp/"
    commandLine "/bin/bash", "-c", "./terraform apply -input=false ${terraform_plan}"
    //ignoreExitValue true
    
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
		return standardOutput.toString()
	}
}
task destroyTerraform(type: Exec) {
	description "Terraform destroy"
	group "Terraform"
	//dependsOn planTerraform
	workingDir "/home/limpens/Development/akagi/tf-temp/"
    commandLine "/bin/bash", "-c", "./terraform destroy -force"
    //ignoreExitValue true
    
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
		return standardOutput.toString()
	}
}
task showTerraform(type: Exec) {
	description "Terraform show"
	group "Terraform"
	dependsOn planTerraform
	workingDir "/home/limpens/Development/akagi/tf-temp/"
    commandLine "/bin/bash", "-c", "./terraform show -module-depth=-1 ${terraform_plan}"
    //ignoreExitValue true
    
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
		return standardOutput.toString()
	}
}
