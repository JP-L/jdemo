#/*
# * Copyright (c) 2018 JP-L, https://www.jp-l.org/
# *
# * Permission is hereby granted, free of charge, to any person obtaining
# * a copy of this software and associated documentation files (the
# * "Software"), to deal in the Software without restriction, including
# * without limitation the rights to use, copy, modify, merge, publish,
# * distribute, sublicense, and/or sell copies of the Software, and to
# * permit persons to whom the Software is furnished to do so, subject to
# * the following conditions:
# *
# * The above copyright notice and this permission notice shall be
# * included in all copies or substantial portions of the Software.
#
# * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#*/

# Language setting
language: java

# Set language version. This is only required if you use the default Shippable image for your build
jdk:
  - oraclejdk8

# use this to control what branches get built.
# http://docs.shippable.com/ci/advancedOptions/branches/
branches:
  only:
    #- master
    - releases
    - development

# Specify which services you need. This is only valid if you use the default Shippable image for your build
#services:

env:
  # Sonar props
  global:
    - TEST_RESULTS_DIR=$SHIPPABLE_REPO_DIR/shippable/testresults
    - CODE_COVERAGE_DIR=$SHIPPABLE_REPO_DIR/shippable/codecoverage
    - TESTS_LOC_DIR=$SHIPPABLE_REPO_DIR/src/test
    - MOD_LOC=$SHIPPABLE_REPO_DIR/node_modules/.bin/
    - secure: Qk6NKicUfeWMIPcA5HGJebxUzVUV4SPTV6Oq47G2GgC1TjrFMcwrrZTzrHGJ1q2jP1el+M0OmcuTmQjgUIHGXWZACkvw/y6F3Y0yOLUGJhAHRIN2JHsj5c3PjMoz4U/wYM2eKOiZwiaFsI2sm455wU2jHo6+9cgCJdEfMPX2rBM6w9Uy9VpWbZ/FUzBRxuDakVoErtJ63frGKEcQ0nbNrbqETARQJfsrLw/zY65tNW6+EOpEunQOMTaZfpQ5yY6CEFMDxN2AsdBfmTpfD4x5houhSOvWXSm1zyDmavYlO+aXjq/WzuZymCmfGhjDUfDj0CMAw/E1hMpMrJ5f8zWdEg==
    - secure: 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
    - secure: bzzevaPxwwIxFbyR2ik3xILewufFDzVxlDxB5lcPRGzIUjXpe3pFxaHtoBX3NO/1mcqURCWvavMHccyHaP8/IywDVvjql3PB/au3ql2/bW8c+E4ylncFt1f7a07QrZQaZVa5ZBQoWgpWhIjNxxHiy4Stcm7YfJGauvsX6sDwk49WfiJlva6TzSPl0PXayesjeSjznOoFu2d++lFpwkwt7YazD/+nAbVVmu+boBHFFjy3wwaKtlVRq9WtTq7xOU+YhpMKkLA3ZO2/ixmad1SzSbjHBnunWgr5byzK3Zmuc2JbFMydiwQwlrUebKmSr6I+jKJaixAapygzuRmZU3xhPQ==

#matrix:

# The build configuration
build:
  # commands in this section run on your build machine and not inside your CI container.
  pre_ci:
    - echo "==== Prepare environment ===="
    - mkdir -p $TEST_RESULTS_DIR && mkdir -p $CODE_COVERAGE_DIR
    - pushd $TESTS_LOC_DIR
    - if [ "$BRANCH" == "development" ]; then
           echo "==== Development branch ====";
      elif [ "$BRANCH" == "release" ]; then
           echo "==== Release branch ====";
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Master branch ====";
      else
           echo "==== Unknown branch ====";
      fi
    - echo "==== List all environment variables ====" && printenv

  pre_ci_boot:
    image_name: 791079558361.dkr.ecr.eu-west-1.amazonaws.com/jpl/u16jav
    image_tag: '1.0'
    pull: true
    options: '--privileged=false --net=bridge -e FOO=true -e BOO=false'

  # commands in this section run inside your CI container. In addition, any commands such as ls, 
  # in this section can be used to skip default processing for CI.
  ci:
    - echo "==== Prepare Gradle environment ===="
    - mkdir -p $HOME/.gradle
    - cp $SHIPPABLE_REPO_DIR/bas/resources/gradle/gradle.properties $HOME/.gradle/
    - printenv | grep SONARQUBE_PROP | cut -d'=' -f 2- | tr '|' '\n' >> $HOME/.gradle/gradle.properties
    - printenv | grep BINREPO_PROP | cut -d'=' -f 2- | tr '|' '\n' >> $HOME/.gradle/gradle.properties
    - printenv | grep SRCREPO_PROP | cut -d'=' -f 2- | tr '|' '\n' >> $HOME/.gradle/gradle.properties
    - sed -i -r "s|MY_ACCESS_ID|$AMAZONKEYS_ACCESSKEY|g" $HOME/.gradle/gradle.properties 
    - sed -i -r "s|MY_SECRET|$AMAZONKEYS_SECRETKEY|g" $HOME/.gradle/gradle.properties
    
    - echo "==== Building the Java application ===="
    - gradle assemble
    - if [ "$BRANCH" != "master" ]; then
           echo "==== Tests and Quality control for the Java application ====";  
           gradle inspectQuality;
           gradle runFunctionalAndIntegrationTests;
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Tests for the Java application ====";  
           gradle test;
           gradle runFunctionalAndIntegrationTests;
      else
           echo "==== Unknown branch ====";
      fi
    - echo "==== CI completed. Move to post CI ===="

  post_ci:
    - echo "==== Post CI tasks==== "
    - if [ "$BRANCH" == "master" ]; then shipctl post_resource_state jdemoImg versionName $BRANCH.$BUILD_NUMBER; fi
    - if [ "$BRANCH" == "releases" ]; then shipctl post_resource_state jdemoImgQA versionName $BRANCH.$BUILD_NUMBER; fi

  on_success:
    - if [ "$BRANCH" == "development" ]; then
           echo "==== Release the code for Acceptance and Smoke testing ====";
           gradle releaseDevelopment;
      elif [ "$BRANCH" == "releases" ]; then
           echo "==== Tag as alpha release ====";
           gradle releaseAlpha;
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Publish the next Release ====";   
           gradle publishRelease;
      else
           echo "==== Unknown branch ====";
      fi

  on_failure:
    - echo "==== Build failed ===="
    
  cache: false

integrations:
# If you are using integrations, you'll need to set it up in two places. Subscription settings & here in this section of the yml.
    notifications:
        - integrationName: Slack
          type: slack
          recipients:
            - "#jdemo"
          branches:
            only:
                - master
                - release
                - development
          on_success: always
          on_failure: always
          on_pull_request: always
          on_start: always

    hub:
        - integrationName: AWS
          type: ecr
          region: eu-west-1
#          agent_only:
#          branches:
  
#### END CI CONFIG

#### RESOURCES CONFIG (GLOBAL ACROSS SUBSCRIPTION)
resources:
    - name: jdemoImg
      type: image
      integration: AWS
      versionTemplate:
        sourceName: "jdemo"
        versionName: "latest"
        
    - name: jdemoImgQA
      type: image
      integration: AWS
      versionTemplate:
        sourceName: "jdemo"
        versionName: "latest"

     # Docker options
    - name: dockerOptions
      type: dockerOptions
      version:
        memory: 1024                        #in MiB
        cpuShares: 10
        portMappings:
            - "8080:8080"
        #links:                                    #containerName:alias
        #   - <container name>:<alias>
        #   - <container name>:<alias>
        #volumes:
        #  - "<source>:<container path>:<options>"
        #  - "<source>:<container path>:<options>
        #logConfig:
        #    type: awslogs
        #    options:
        #      awslogs-group: Demo-Applications
        #      awslogs-region: eu-central-1
        #entryPoint:
        #  - <string>
        #  - <string>
        #cmd:
        #  - <string>
        #  - <string>
        #workingDir: <path to working dir>
        privileged: false                     # May be true or false
        #labels:
        #  <key1>: <value1>
        #  <key2>: <value2>
        #volumesFrom:
        #  - "<container name>:<options>"
        #  - "<container name>:<options>"
        #ulimits:
        #  - name: <name of limit>                 # e.g. cpu
        #    soft: <number>                        # soft Limit
        #    hard: <number>                        # hard Limit
        #  - name: <name of limit>                 # e.g. nofile
        #    soft: <number>                        # soft Limit, e.g. 50
        #    hard: <number>                        # hard Limit, e.g. 100
        #dnsServers:
        #  - "<ip address>"
        #dnsSearch:
        #  - "<ip address>"
        #user: <string>                            # For GKE, this should be the UID (a number)

    # Number of replicas
    - name: replicas
      type: replicas
      version:
        count: 1
        
    # Cluster
    - name: QA-cluster
      type: cluster
      integration: AWS
      versionTemplate:
        sourceName: oz-qa-cluster
        region: eu-central-1

   #### INTEGRATIONS ####
    - name: aws-Integration
      type: integration
      integration: AWS

    - name: aws-cliConfig
      type: cliConfig
      integration: AWS
      versionTemplate:
        region: eu-central-1

    #### NOTIFICATIONS ####
    - name: Slack
      type: notification
      integration: Slack
      versionTemplate:
        recipients:
            - "#jdemo"

#### END RESOURCES CONFIG

#### JOBS CONFIG (GLOBAL ACROSS SUBSCRIPTION)
# ****************************************************************************************************************
# * Build Release branch after successful merge from Development branch                                          *
# *                    ------------- Then ------------------------------>                                        *
# *                                   A. Create a Manifest                                                       *
# *                                   B. setup Staging environment                                               *
# *                                   ------------- Then ------------------------------>                         *
# *                                                 C. Deploy Image                                              *
# *                                                 D. Run QA tests                                              *
# *                                                 E. Merge Release branch into Master branch                   *
# *                                                 ------------- Then ------------------------------>           *
# *                                                               F. Build Master branch                         *
# *                                                               G. Publish to DockerHub after successful build *
# ****************************************************************************************************************

jobs:
    # ****************************************************************************************************************
    # * Build Release branch after successful merge from Development branch                                          *
    # *                    ------------- Then ------------------------------>                                        *
    # *                                   A. Create a Manifest                                                       *
    # *                                   B. setup Staging environment                                               *
    # ****************************************************************************************************************
    - name: jdemo_runCI
      type: runCI
      steps:
        - OUT: jdemoImg
        - OUT: jdemoImgQA
        
    - name: jdemoManifest
      type: manifest
      dependencyMode: strict   # optional
      flags:
        - jdemo
      steps:
        - IN: jdemoImg
        - IN: dockerOptions
        - IN: replicas

    - name: jdemoManifestQA
      type: manifest
      dependencyMode: strict   # optional
      flags:
        - jdemo
      steps:
        - IN: jdemoImgQA
        - IN: dockerOptions
        - IN: replicas
        
    - name: genericSetupStagingEnvironment
      type: runSh
      triggerMode: serial
      dependencyMode: strict   # optional
      on_start:
        - NOTIFY: Slack
      steps:
        - IN: jdemoImgQA
        - IN: aws-cliConfig
          scopes:
            - ecr
        - TASK:
            name: pullCustomImage
            script:
              #- docker pull 791079558361.dkr.ecr.eu-west-1.amazonaws.com/jpl/u16jav:1.0
              - docker pull drydock/u16javall:v6.1.4
        - TASK:
            name: setupStagingEnvironment
            runtime:                  # optional
              options:
                #imageName: 791079558361.dkr.ecr.eu-west-1.amazonaws.com/jpl/u16jav
                imageName: drydock/u16javall
                imageTag: 'v6.1.4' #'1.0'
                pull: false
                options: '--privileged=false --net=bridge -e FOO=true -e BOO=false'
            script: 
              - echo "==== TODO TODO TODO TODO ===="
              - echo "==== Setup testing environment for testing Alpha, Beta and RC release ===="
              - gradle -v
              - echo "==== TODO TODO TODO TODO ===="
      on_failure:
        - NOTIFY: Slack

     # ****************************************************************************************************************
     # *                                   ------------- Then ------------------------------>                         *
     # *                                                 C. Deploy Image                                              *
     # *                                                 D. Run QA tests                                              *
     # *                                                 E. Merge Release branch into Master branch                   *
     # ****************************************************************************************************************
    - name: genericDeployImage
      type: deploy
      dependencyMode: strict   # optional
      on_start:
        - NOTIFY: Slack
      flags:
       - jdemo
      steps: 
        - IN: jdemoManifestQA    # manifest
        - IN: genericSetupStagingEnvironment
        - IN: QA-cluster
        #- IN: elbQA
        #  applyTo:
        #    - manifest: jdemoManifest
        #      image: jdemo
        #      port: 8080
      on_failure:
        - NOTIFY: Slack

    - name: genericRunQATests
      type: runSh
      dependencyMode: strict   # optional
      on_start:
        - NOTIFY: Slack
      steps:
        - IN: genericDeployImage
          switch: off
        - IN: aws-cliConfig
          scopes:
            - ecr
        - TASK:
            name: pullCustomImage
            script:
              #- docker pull 791079558361.dkr.ecr.eu-west-1.amazonaws.com/jpl/u16jav:1.0
              - docker pull drydock/u16javall:v6.1.4
        - TASK:
            name: runQATests
            runtime:                  # optional
              options:
                #imageName: 791079558361.dkr.ecr.eu-west-1.amazonaws.com/jpl/u16jav
                imageName: drydock/u16javall
                imageTag: 'v6.1.4' #'1.0'
                pull: false
                options: '--privileged=false --net=bridge -e FOO=true -e BOO=false'
            script:
              - echo "==== TODO TODO TODO TODO ===="
              - echo "==== run tests for testing Alpha release ===="
              - gradle -v
              - echo "==== set Beta release on success ===="
              - echo "==== run tests for testing Beta release ===="
              - echo "==== set RC release on success ===="
              - echo "==== run RC tests if any ===="
              - echo "==== clean up deployed image and test env ===="
              - echo "==== merge into master ===="
              - echo "==== TODO TODO TODO TODO ===="
      on_failure:
        - NOTIFY: Slack

#### END JOBS CONFIG