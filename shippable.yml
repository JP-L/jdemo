#/*
# * Copyright (c) 2018 JP-L, https://www.jp-l.org/
# *
# * Permission is hereby granted, free of charge, to any person obtaining
# * a copy of this software and associated documentation files (the
# * "Software"), to deal in the Software without restriction, including
# * without limitation the rights to use, copy, modify, merge, publish,
# * distribute, sublicense, and/or sell copies of the Software, and to
# * permit persons to whom the Software is furnished to do so, subject to
# * the following conditions:
# *
# * The above copyright notice and this permission notice shall be
# * included in all copies or substantial portions of the Software.
#
# * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#*/

# Language setting
language: java

# Set language version. This is only required if you use the default Shippable image for your build
jdk:
  - oraclejdk8

# use this to control what branches get built.
# http://docs.shippable.com/ci/advancedOptions/branches/
branches:
  only:
    #- master
    - releases
    - development

# Specify which services you need. This is only valid if you use the default Shippable image for your build
#services:

env:
  # Sonar props
  global:
    - TEST_RESULTS_DIR=$SHIPPABLE_REPO_DIR/shippable/testresults
    - CODE_COVERAGE_DIR=$SHIPPABLE_REPO_DIR/shippable/codecoverage
    - TESTS_LOC_DIR=$SHIPPABLE_REPO_DIR/src/test
    - MOD_LOC=$SHIPPABLE_REPO_DIR/node_modules/.bin/
    - secure: Qk6NKicUfeWMIPcA5HGJebxUzVUV4SPTV6Oq47G2GgC1TjrFMcwrrZTzrHGJ1q2jP1el+M0OmcuTmQjgUIHGXWZACkvw/y6F3Y0yOLUGJhAHRIN2JHsj5c3PjMoz4U/wYM2eKOiZwiaFsI2sm455wU2jHo6+9cgCJdEfMPX2rBM6w9Uy9VpWbZ/FUzBRxuDakVoErtJ63frGKEcQ0nbNrbqETARQJfsrLw/zY65tNW6+EOpEunQOMTaZfpQ5yY6CEFMDxN2AsdBfmTpfD4x5houhSOvWXSm1zyDmavYlO+aXjq/WzuZymCmfGhjDUfDj0CMAw/E1hMpMrJ5f8zWdEg==
    - secure: YREamOExERn8jpJqUMepfsc/pGpMuk5Dapmn6zxdEPviLUjDePN9btybFonYK+H/+sDtiHVATdvCpj+bAqcGwfUU9JvjoFoEsHH+YjuEeb2SkvLXAnmVo1rgZkrGqGzPZKszK4SU9cjwIVzmSI4qcdlfP//ZAjQqiE19DjXTNv4ik4VsOtfde7XNxYkiFwr3wCCuZiOAlwZ2tknGSVVloX+h8JrdT7yZ4lRqUjJWP+xCbfpGgRtUhgeA69oQfft4DKEivzGA07jLv7yfjY+WnQl/xiqnUFI9kai1zOxHaYfcQuHd2fL/kb11E3g74F91gFOkKm9ORAvp7pxxZnPLvivEk0uUSBKKkW+39eGTscAdSkktFErnzbzOEqBrJClqi3qvFsmy0ITq2brY06fkXxKJWeGGTCkleIFljthTJ6XrVo4bVnXCDtsfDftVUvMOy45RlpyQJb2DlWvQyWctRh+MfDFF0rBwo/QsKPQ9hw6/bfySpAhS+U7szHF45rY4ertrVabhQSzqx9zhUnExiUo1wTwyhN34sq0hA9kgTAbovsBn4xl5hFpjoXnxPHnNwEu4betTlWU1c/11Ahe1owQCZfVqlEt+a2udyLXiMumZQGHuX0WmuQA7ZchwP5rUF8sqXd43KiZhYN9W7aIv55EiVq+h6X/fcU55wK+UqfU=
    - secure: bzzevaPxwwIxFbyR2ik3xILewufFDzVxlDxB5lcPRGzIUjXpe3pFxaHtoBX3NO/1mcqURCWvavMHccyHaP8/IywDVvjql3PB/au3ql2/bW8c+E4ylncFt1f7a07QrZQaZVa5ZBQoWgpWhIjNxxHiy4Stcm7YfJGauvsX6sDwk49WfiJlva6TzSPl0PXayesjeSjznOoFu2d++lFpwkwt7YazD/+nAbVVmu+boBHFFjy3wwaKtlVRq9WtTq7xOU+YhpMKkLA3ZO2/ixmad1SzSbjHBnunWgr5byzK3Zmuc2JbFMydiwQwlrUebKmSr6I+jKJaixAapygzuRmZU3xhPQ==

#matrix:

# The build configuration
build:
  # commands in this section run on your build machine and not inside your CI container.
  pre_ci:
    - echo "==== Prepare environment ===="
    - mkdir -p $TEST_RESULTS_DIR && mkdir -p $CODE_COVERAGE_DIR
    - pushd $TESTS_LOC_DIR
    - if [ "$BRANCH" == "development" ]; then
           echo "==== Development branch ====";
      elif [ "$BRANCH" == "release" ]; then
           echo "==== Release branch ====";
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Master branch ====";
      else
           echo "==== Unknown branch ====";
      fi
    - echo "==== List all environment variables ====" && printenv

  pre_ci_boot:
    image_name: 791079558361.dkr.ecr.eu-west-1.amazonaws.com/jpl/u16jav
    image_tag: '1.0'
    pull: true
    options: '--privileged=false --net=bridge -e FOO=true -e BOO=false'

  # commands in this section run inside your CI container. In addition, any commands such as ls, 
  # in this section can be used to skip default processing for CI.
  ci:
    - echo "==== Prepare Gradle environment ===="
    - mkdir -p $HOME/.gradle
    - cp $SHIPPABLE_REPO_DIR/bas/resources/gradle/gradle.properties $HOME/.gradle/
    - printenv | grep SONARQUBE_PROP | cut -d'=' -f 2- | tr '|' '\n' >> $HOME/.gradle/gradle.properties
    - printenv | grep BINREPO_PROP | cut -d'=' -f 2- | tr '|' '\n' >> $HOME/.gradle/gradle.properties
    - printenv | grep SRCREPO_PROP | cut -d'=' -f 2- | tr '|' '\n' >> $HOME/.gradle/gradle.properties
    - echo "==== Building the Java application ===="
    - gradle assemble
    - if [ "$BRANCH" != "master" ]; then
           echo "==== Tests and Quality control for the Java application ====";  
           gradle inspectQuality;
           gradle runFunctionalAndIntegrationTests;
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Tests for the Java application ====";  
           gradle test;
           gradle runFunctionalAndIntegrationTests;
      else
           echo "==== Unknown branch ====";
      fi
    - echo "==== CI completed. Move to post CI ===="

  post_ci:
    - echo "==== Post CI tasks==== "

  on_success:
    - if [ "$BRANCH" == "development" ]; then
           echo "==== Release the code for Acceptance and Smoke testing ====";
           gradle releaseDevelopment;
      elif [ "$BRANCH" == "releases" ]; then
           echo "==== Tag as alpha release ====";
           gradle releaseAlpha;
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Publish the next Release ====";   
           gradle publishRelease;
      else
           echo "==== Unknown branch ====";
      fi

  on_failure:
    - echo "==== Build failed ===="
    
  cache: false

integrations:
# If you are using integrations, you'll need to set it up in two places. Subscription settings & here in this section of the yml.
    notifications:
        - integrationName: Slack
          type: slack
          recipients:
            - "#jdemo"
          branches:
            only:
                - master
                - release
                - development
          on_success: always
          on_failure: always
          on_pull_request: always
          on_start: always

    hub:
        - integrationName: AWS
          type: ecr
          region: eu-west-1
#          agent_only:
#          branches:
  
#### END CI CONFIG

#### RESOURCES CONFIG (GLOBAL ACROSS SUBSCRIPTION)
resources:
    - name: jdemoImg
      type: image
      integration: Binary-Repository-Registry
      pointer:
        sourceName: "jdemo"
      seed:
        versionName: "latest"

     # Docker options
    - name: dockerOptions
      type: dockerOptions
      version:
        memory: 1024                        #in MiB
        cpuShares: 10
        portMappings:
            - "8080:8080"
        #links:                                    #containerName:alias
        #   - <container name>:<alias>
        #   - <container name>:<alias>
        #volumes:
        #  - "<source>:<container path>:<options>"
        #  - "<source>:<container path>:<options>
        #logConfig:
        #    type: awslogs
        #    options:
        #      awslogs-group: Demo-Applications
        #      awslogs-region: eu-central-1
        #entryPoint:
        #  - <string>
        #  - <string>
        #cmd:
        #  - <string>
        #  - <string>
        #workingDir: <path to working dir>
        privileged: false                     # May be true or false
        #labels:
        #  <key1>: <value1>
        #  <key2>: <value2>
        #volumesFrom:
        #  - "<container name>:<options>"
        #  - "<container name>:<options>"
        #ulimits:
        #  - name: <name of limit>                 # e.g. cpu
        #    soft: <number>                        # soft Limit
        #    hard: <number>                        # hard Limit
        #  - name: <name of limit>                 # e.g. nofile
        #    soft: <number>                        # soft Limit, e.g. 50
        #    hard: <number>                        # hard Limit, e.g. 100
        #dnsServers:
        #  - "<ip address>"
        #dnsSearch:
        #  - "<ip address>"
        #user: <string>                            # For GKE, this should be the UID (a number)

    # Number of replicas
    - name: replicas
      type: replicas
      version:
        count: 1
        
    # Cluster
    - name: QA-cluster
      type: cluster
      integration: AWS
      versionTemplate:
        sourceName: tst-cluster
        region: eu-central-1

   #### INTEGRATIONS ####
    - name: aws-Integration
      type: integration
      integration: AWS

    - name: aws-cliConfig
      type: cliConfig
      integration: AWS
      versionTemplate:
        region: eu-central-1

    #### NOTIFICATIONS ####
    - name: Slack
      type: notification
      integration: Slack
      versionTemplate:
        recipients:
            - "#jdemo"

#### END RESOURCES CONFIG

#### JOBS CONFIG (GLOBAL ACROSS SUBSCRIPTION)
jobs:
    - name: jdemo_runCIStaging
      type: runCI
      steps:
        - IN: jdemo_ciRepo
        - IN: jdemoStaging_rSync
        
    - name: jdemo_runCIPublishing
      type: runCI
      steps:
        - IN: jdemo_ciRepo
        - IN: jdemoPublishing_rSync
        - IN: genericRunQATests
      
    - name: jdemoManifest
      type: manifest
      dependencyMode: strict   # optional
      flags:
        - jdemo
      steps:
        - IN: jdemo_runCIStaging
        - IN: jdemoImg
        - IN: dockerOptions
        - IN: replicas 

    - name: genericSetupStagingEnvironment
      type: runSh
      triggerMode: serial
      dependencyMode: strict   # optional
      on_start:
        - NOTIFY: Slack
      steps:
        - IN: jdemo_runCI
        - IN: aws-cliConfig
          scopes:
            - ecr
        - TASK:
            name: pullCustomImage
            script:
              #- docker pull 791079558361.dkr.ecr.eu-west-1.amazonaws.com/jpl/u16jav:1.0
              - docker pull drydock/u16javall:v6.1.4
        - TASK:
            name: setupStagingEnvironment
            runtime:                  # optional
              options:
                #imageName: 791079558361.dkr.ecr.eu-west-1.amazonaws.com/jpl/u16jav
                imageName: drydock/u16javall
                imageTag: 'v6.1.4' #'1.0'
                pull: false
                options: '--privileged=false --net=bridge -e FOO=true -e BOO=false'
            script: 
              - echo "==== TODO TODO TODO TODO ===="
              - echo "==== Setup testing environment for testing Alpha release ===="
              - gradle -v
              - echo "==== TODO TODO TODO TODO ===="
      on_failure:
        - NOTIFY: Slack

    - name: genericDeployImage
      type: deploy
      dependencyMode: strict   # optional
      on_start:
        - NOTIFY: Slack
      flags:
       - jdemo
      steps: 
        - IN: jdemoManifest    # manifest
          switch: off
        - IN: genericSetupStagingEnvironment
          switch: off
        - IN: QA-cluster
          switch: off
        #- IN: elbQA
        #  applyTo:
        #    - manifest: jdemoManifest
        #      image: jdemo
        #      port: 8080
      on_failure:
        - NOTIFY: Slack

    - name: genericRunQATests
      type: runSh
      dependencyMode: strict   # optional
      on_start:
        - NOTIFY: Slack
      steps:
        - IN: genericDeployImage
          switch: off
        - IN: aws-cliConfig
          scopes:
            - ecr
        - TASK:
            name: pullCustomImage
            script:
              #- docker pull 791079558361.dkr.ecr.eu-west-1.amazonaws.com/jpl/u16jav:1.0
              - docker pull drydock/u16javall:v6.1.4
        - TASK:
            name: runQATests
            runtime:                  # optional
              options:
                #imageName: 791079558361.dkr.ecr.eu-west-1.amazonaws.com/jpl/u16jav
                imageName: drydock/u16javall
                imageTag: 'v6.1.4' #'1.0'
                pull: false
                options: '--privileged=false --net=bridge -e FOO=true -e BOO=false'
            script:
              - echo "==== TODO TODO TODO TODO ===="
              - echo "==== run tests for testing Alpha release ===="
              - gradle -v
              - echo "==== set Beta release on success ===="
              - echo "==== run tests for testing Beta release ===="
              - echo "==== set RC release on success ===="
              - echo "==== merge into master ===="
              - echo "==== TODO TODO TODO TODO ===="
      on_failure:
        - NOTIFY: Slack

    - name: genericPublish
      type: runSh
      on_start:
        - NOTIFY: Slack
      dependencyMode: strict   # optional
      steps:
        - IN: jdemo_runCIPublishing
        - TASK:
            name: publish
            script:
              - 'echo "==== TODO TODO TODO TODO ===="'
              - 'echo "==== Finish all ===="'
              - 'echo "==== TODO TODO TODO TODO ===="'
      on_failure:
        - NOTIFY: Slack

#### END JOBS CONFIG