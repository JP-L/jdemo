#
# Continuous Integration
#
 
# Language setting
language: java

# Set language version. This is only required if you use the default Shippable image for your build
jdk:
  - oraclejdk8

# use this to control what branches get built.
# http://docs.shippable.com/ci/advancedOptions/branches/
branches:
  only:
    - master
    - release
    - development

# Specify which services you need. This is only valid if you use the default Shippable image for your build
#services:

env:
  # Sonar props
  global:
    - TEST_RESULTS_DIR=$SHIPPABLE_REPO_DIR/shippable/testresults
    - CODE_COVERAGE_DIR=$SHIPPABLE_REPO_DIR/shippable/codecoverage
    - TESTS_LOC_DIR=$SHIPPABLE_REPO_DIR/src/test
    - MOD_LOC=$SHIPPABLE_REPO_DIR/node_modules/.bin/
    - secure: Qk6NKicUfeWMIPcA5HGJebxUzVUV4SPTV6Oq47G2GgC1TjrFMcwrrZTzrHGJ1q2jP1el+M0OmcuTmQjgUIHGXWZACkvw/y6F3Y0yOLUGJhAHRIN2JHsj5c3PjMoz4U/wYM2eKOiZwiaFsI2sm455wU2jHo6+9cgCJdEfMPX2rBM6w9Uy9VpWbZ/FUzBRxuDakVoErtJ63frGKEcQ0nbNrbqETARQJfsrLw/zY65tNW6+EOpEunQOMTaZfpQ5yY6CEFMDxN2AsdBfmTpfD4x5houhSOvWXSm1zyDmavYlO+aXjq/WzuZymCmfGhjDUfDj0CMAw/E1hMpMrJ5f8zWdEg==
    - secure: pdNfpgDQgmz0oLT89pK0oZfizQ670co/o6jEZlEqnLt1DIkmQwKFwX/o2xEiN0v2R6PmAJcQN+H0ynYJqeYW4Bk9ZfWa0hzcYXK31LvEisQ0VXEo8RiHkifwECkBXAx7rp6iHvSK+ocTepoo4p3nH3AZCZbBbzZCH5ygKPxve7r4IGHVhwmq1yCz7esr/AtdsZgRSkF0r81DZuAyZhZKurGd+YzyzRsqSIFsmw3zDlKql/+GWjvxyu1eNyrdjVxkHkvfMxTzdC4aBElM6YszgK0s25CR+/vKUJuyVV16xvz+GaVwqlp96CQeIkCWN8Vqq3OS1F2agNUpzt6C1zJkoQQIBHDVnWiFyxgXHcebVYMH59ORGvcMPSABm0KoyFDccu72AUdm70dYwMm3ISvt5uwFtREpIPwK7DdqhMaj9lY3av2PelpKVn5S5VXZX4C0mGH/BntuTxP6SgTqfl84KPK0z8KTIIxLFzK4YxtVZeFbyuJrqQgFbOT5jMJt3H+WLEFOn81EIgxYPkkxNvhPxgLB8Q6lBJQiy/fCTIEOyurPT1C6TErv7znduF88xaJnZWvvuNJMDYgpX5iUDKjNLsZ2fJp6ZpMW8GUTfvMOfxJzRrcK5bqGaWT8OqHkEJhrzblBL0/KLghGVs5MY0n8qFQSlRmWeuYRU7Y0Maa0MoU=

#matrix:

# The build configuration
build:
  # commands in this section run on your build machine and not inside your CI container.
  pre_ci:
    - echo "==== Prepare environment ===="
    - mkdir -p $TEST_RESULTS_DIR && mkdir -p $CODE_COVERAGE_DIR
    - pushd $TESTS_LOC_DIR
    - if [ "$BRANCH" == "development" ]; then
           echo "==== Development branch ====";
      elif [ "$BRANCH" == "release" ]; then
           echo "==== Release branch ====";
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Master branch ====";
      else
           echo "==== Unknown branch ====";
      fi
    - echo "==== List all environment variables ====" && printenv
    
  pre_ci_boot:
    image_name: 791079558361.dkr.ecr.eu-west-1.amazonaws.com/jpl/u16jav
    image_tag: '1.0'
    pull: true
    options: '--privileged=false --net=bridge -e FOO=true -e BOO=false'

  # commands in this section run inside your CI container. In addition, any commands such as ls, 
  # in this section can be used to skip default processing for CI.
  ci:
    - echo "==== Prepare Gradle environment ===="
    - mkdir -p $HOME/.gradle
    - cp $SHIPPABLE_REPO_DIR/src/main/resources/gradle/gradle.properties $HOME/.gradle/
    - printenv | grep SONARQUBE_PROP | cut -d'=' -f 2- | tr '|' '\n' >> $HOME/.gradle/gradle.properties
    - printenv | grep BINREPO_PROP | cut -d'=' -f 2- | tr '|' '\n' >> $HOME/.gradle/gradle.properties
    - echo "==== Building the Java application ===="
    - gradle assemble
    - if [ "$BRANCH" != "master" ]; then
           echo "==== Tests and Quality control for the Java application ====" &&  
           gradle inspectQuality &&
           gradle runFunctionalAndIntegrationTests;
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Tests for the Java application ====" &&  
           gradle test &&
           gradle runFunctionalAndIntegrationTests;
      else
           echo "==== Unknown branch ===="
      fi
           
  post_ci:
    - echo "==== Post CI tasks==== "
    
  on_success:
    - if [ "$BRANCH" == "development" ]; then
           echo "==== Release the code for Acceptance and Smoke testing ====" &&
           gradle releaseDevelopment;
      elif [ "$BRANCH" == "release" ]; then
           echo "==== Tag as milestone ====" &&
           gradle releaseMilestone;
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Publish the next Release ====" &&   
           gradle releaseVersion;
      else
           echo "==== Unknown branch ===="
      fi
    
  on_failure:
    - echo "==== Build failed ===="
    
  cache: false
  
 #
 # Assembly line jobs
 #
jobs:
  - name: jdemo
    type: runCI
    dependencyMode: immediate   # optional
    flags:
      - jdemo
    steps:
      - OUT: jdemo-dev-image

 #
 # Integrations
 #
integrations:
# If you are using integrations, you'll need to set it up in two places. Subscription settings & here in this section of the yml.
    notifications:
        - integrationName: Slack
          type: slack
          recipients:
            - "#jdemo"
          branches:
            only:
                - master
                - release
                - development
          on_success: always
          on_failure: always
          on_pull_request: always
          on_start: always

    hub:
        - integrationName: AWS-ECR
          type: ecr
          region: eu-west-1
#          agent_only:
#          branches:
