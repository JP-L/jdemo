#/*
# * Copyright (c) 2018 JP-L, https://www.jp-l.org/
# *
# * Permission is hereby granted, free of charge, to any person obtaining
# * a copy of this software and associated documentation files (the
# * "Software"), to deal in the Software without restriction, including
# * without limitation the rights to use, copy, modify, merge, publish,
# * distribute, sublicense, and/or sell copies of the Software, and to
# * permit persons to whom the Software is furnished to do so, subject to
# * the following conditions:
# *
# * The above copyright notice and this permission notice shall be
# * included in all copies or substantial portions of the Software.
#
# * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#*/

# Language setting
language: java

# Set language version. This is only required if you use the default Shippable image for your build
jdk:
  - oraclejdk8

# use this to control what branches get built.
# http://docs.shippable.com/ci/advancedOptions/branches/
branches:
  only:
    #- master
    - releases
    - development

# Specify which services you need. This is only valid if you use the default Shippable image for your build
#services:

env:
  global:
    - TEST_RESULTS_DIR=$SHIPPABLE_REPO_DIR/shippable/testresults
    - CODE_COVERAGE_DIR=$SHIPPABLE_REPO_DIR/shippable/codecoverage
    - TESTS_LOC_DIR=$SHIPPABLE_REPO_DIR/src/test
    - MOD_LOC=$SHIPPABLE_REPO_DIR/node_modules/.bin/

#matrix:

# The build configuration
build:
  # commands in this section run on your build machine and not inside your CI container.
  pre_ci:
    - echo "==== Prepare environment ====" &&
      mkdir -p $TEST_RESULTS_DIR && 
      mkdir -p $CODE_COVERAGE_DIR && 
      pushd $TESTS_LOC_DIR;
      if [ "$BRANCH" == "development" ]; then
           echo "==== Development branch ====";
      elif [ "$BRANCH" == "release" ]; then
           echo "==== Release branch ====";
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Master branch ====";
      else
           echo "==== Unknown branch ====";
      fi
    #- echo "==== Kill any old containers which might be running ====" && docker ps -a | grep -v 'reqProc' | cut -d ' ' -f1 #| xargs docker stop"
    - echo "==== DEBUG List all environment variables ====" && printenv

  pre_ci_boot:
    image_name: $CI_CONTAINER
    image_tag: $CI_CONTAINER_VERSION
    pull: true
    options: '--privileged=false --net=bridge -e FOO=true -e BOO=false'

  # commands in this section run inside your CI container. In addition, any commands such as ls, 
  # in this section can be used to skip default processing for CI.
  ci:
    - echo "==== Prepare Gradle environment ====" && 
      mkdir -p $HOME/.gradle &&
      cp $SHIPPABLE_REPO_DIR/bas/resources/gradle/gradle.properties $HOME/.gradle/ &&

      sed -i -r "s|BURL|$BINREPO_URL|g" $HOME/.gradle/gradle.properties &&
      sed -i -r "s|REG_URL|$BINREPO_REGURL|g" $HOME/.gradle/gradle.properties &&
      sed -i -r "s|USR|$BINREPO_USR|g" $HOME/.gradle/gradle.properties &&
      sed -i -r "s|PWD|$BINREPO_PWD|g" $HOME/.gradle/gradle.properties &&
      sed -i -r "s|EMAIL|$BINREPO_EMAIL|g" $HOME/.gradle/gradle.properties &&

      sed -i -r "s|SONAR_URL|$SONAR_URL|g" $HOME/.gradle/gradle.properties &&
      sed -i -r "s|ORG|$ORGANIZATION|g" $HOME/.gradle/gradle.properties &&
      sed -i -r "s|SONAR_KEY|$SONAR_KEY|g" $HOME/.gradle/gradle.properties &&
      
      sed -i -r "s|SRCREPO_KEY|$SRCREPO_USR|g" $HOME/.gradle/gradle.properties &&
      
      sed -i -r "s|MY_ACCESS_ID|$AMAZONKEYS_ACCESSKEY|g" $HOME/.gradle/gradle.properties && 
      sed -i -r "s|MY_SECRET|$AMAZONKEYS_SECRETKEY|g" $HOME/.gradle/gradle.properties

    - echo "==== Building the Java application ====" &&
      gradle assemble;
      if [ "$BRANCH" != "master" ]; then
           echo "==== Tests and Quality control for the Java application ====";  
           gradle inspectQuality;
           gradle runFunctionalAndIntegrationTests;
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Tests for the Java application ====";  
           gradle test;
           gradle runFunctionalAndIntegrationTests;
      else
           echo "==== Unknown branch ====";
      fi
    - echo "==== CI completed. Move to post CI ===="

  post_ci:
    - echo "==== Post CI tasks ==== ";
      if [ "$BRANCH" == "releases" ]; then
           echo "==== Set $IMAGE_REPOSITORY with $IMAGE_VERSION for $BUILDNUMBER ==== ";
           shipctl put_resource_state jdemoImgQA sourceName $IMAGE_REPOSITORY;
           shipctl put_resource_state jdemoImgQA versionName $IMAGE_VERSION;
           shipctl put_resource_state jdemoImgQA buildNumber $BUILD_NUMBER;
      elif [ "$BRANCH" == "master" ]; then
           shipctl put_resource_state jdemoImg sourceName $IMAGE_REPOSITORY;
           shipctl put_resource_state jdemoImg versionName $IMAGE_VERSION;
           shipctl put_resource_state jdemoImg buildNumber $BUILD_NUMBER;
      else
           echo "==== No Post CI tasks required ====";
      fi

  on_success:
    - if [ "$BRANCH" == "development" ]; then
           echo "==== Release the code for Acceptance and Smoke testing ====";
           gradle releaseDevelopment;
      elif [ "$BRANCH" == "releases" ]; then
           echo "==== Tag as alpha release ====";
           gradle releaseAlpha;
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Publish the next Release ====";   
           gradle publishRelease;
      else
           echo "==== Unknown branch ====";
      fi

  on_failure:
    - echo "==== Build failed ===="
    
  cache: false

integrations:
# If you are using integrations, you'll need to set it up in two places. Subscription settings & here in this section of the yml.
    notifications:
        - integrationName: Slack
          type: slack
          recipients:
            - "#jdemo"
          branches:
            only:
                - master
                - release
                - development
          on_success: always
          on_failure: always
          on_pull_request: always
          on_start: always

    hub:
        - integrationName: AWS-EIS
          type: ecr
          region: eu-west-1
#          agent_only:
#          branches:

    generic:     
        - integrationName: Sonar
        - integrationName: BRep
        - integrationName: SRep
    
#### END CI CONFIG

#### RESOURCES CONFIG (GLOBAL ACROSS SUBSCRIPTION)
resources:
    # Params
    - name: CI_CONTAINER
      type: params
      versionTemplate:
        params:
          secure: QRrl5lPJ3n81QyeeC0fEYzmDxwEBjjJizBsuqTIbWql7nndDrsjdnGxNyHS/qzFmLbVCoCRspCG6Wv3BsQ9GSZ0qwfMK8MdPdexsjZL/PNCusRQT0yyqiVRMF+jfo212+zmjxRFqvVvHU4VDSNAy0CTk1gKlIocL4FafveveYLB6lZDy8rtfVjnU8YeXcT5vXKyX6n6jh3YNGmAjhqzSgKI3QjEiil0dRCLpJrra5BCOao7A46Lbk/21heD7MJeMg28BTfwJ+yKDBIeFp/OS+kXl4O83nUgvVElF4ECb4/70tgxInX+WeVAs0GRVBO4UZnkmt11kIA2gOLCg0M7ZCQ==

    - name: CI_CONTAINER_VERSION
      type: params
      versionTemplate:
        params:
          CI_CONTAINER_VERSION: '1.0'
    
    - name: IMAGE
      type: params
      versionTemplate:
        params:
          secure: QeuzsKzHkuajVJZRzot2eMFbi5yxqjsdsSkOfVoPU8vS5GWeZkK9aUyvUSxPiQVSstDXJhifFYlrTFJ9zwkvjReSpEKd7Yq0OyX+aLFG7oLmqxplyqUIQcM77pEguBRO2ohQnu0j838RZW3xvQc1CBYfvINEorDPF+hVti9T96oS+E2XRVGo3b+HYLAMQ0jjj8LDetDSK/rEHRhcjNh0YLWHemrBelwr114EtPLdqsharqSPdwsTPhQMYjZdnrOemEg7yfCxku+br7ZHudgKCWL+jpxPWrn3zR0CRlYSlVc/YDYycjU9EPRNZgwO3hXBBxDOkzAykUHjvF3R/Sotkg==

    - name: IMAGE_VERSION
      type: params
      versionTemplate:
        params:
          IMAGE_VERSION: 'latest'

    #- name: BINREPO
    #  type: params
    #  versionTemplate:
    #    params:
    #      secure: Bm5LtdxeCfCssVNI47jGTJU5veo5XPTm2iksmk9HIiPsCzYU5XY+mEI8tvIiC0fe1FL2qnedcrufjfCyVVXribf6PShh+g0g/IsGGibA1aGWeByfwTdmRwBDP+R3RTr1BEA6D5ttn/mFoaVxa1affC9OFQNZ+UuPz1O67fVGQTNyILYSatf1R7qMBdsA4adYgLa1Ksyr3lAU2qaoPHXh1xeC+c7jjTixHKgVBNiczMe5V/mJ9sUyYyR7Gtt+oiSEtO7sE3CoHQkeZF7Dr4am+OSoQJzs3TEPU7igSiIqq17DmPBVOlZFAs+YQSWzXpFVhOsXQdfkTNTkEo763c3tvrIEkUZgamcxv0wE3csODxIi0dZZ7T3AefZi0kl3k8qAKAP9PY/h2RuxUGG25kPT7xtBX27VH1uaJbYUoAnMYYhyWhPqK9pneVLxm1WQ2ww/GUvpD7da+wf3AXsZSUYBj9KJAE3bYs/lT/fL8HM+lYzXNKyPpKG8XSvDQkTr0efuaGtqUULoUXgeB7P/9qINh9RojEMlbQ77MF5/jTpb54y11Wp3/3rTHL0inEgSABI7CZ4DONx6+BtSTGMIJqVa537NTUbuw1KZDfpdyY9XUbGfcwipEvHvSHgF9D80nDuTHshQbhm2l0eZFQsYX6oaO7nir7RLrNGO4MeVZ3zSh6B6sANI5/bTdJ+V4enrRqKwpXio5/SuODR8VnU2srsav+NWlamRB7aY6kqsSOCBkZMLtEt/49xVdckMCTxsCqghTtQQWrZl5Vj8OHqYyntgQ2FtDbd4jT24mfx61OW9TfxWVCOX0E0Xft42UwXbKJAKNV/8ZR4lzNhKpp+vBfJGa4rAMF2Rd82mXnv5hLZPvtrXqKobqMh8K96eqelhZUTVUhlT+Po5+wb5lMKAOiJ5toxxldkdZpBxdBt2o24OnhCm28X6HnPInLB7O2hnpRASG5ei4CQcsU90xLV41fY1DJspQgN0db2Nx31uSGmJCYEZ6jrmCX+gu93F2lZt0J58ZZqvQMfwvKM0oEGFQk5Ia3r/qmK503OnTVkYZZcXIhVyCnx9fAAgxCQZwvbq5f4ef0+UpW/sMXoe0SJryPMeTWsixSoIWpgfseCknhsdWUjYhACxPcr74wh9DlXrZGoIRhoQgLQZF74ClDdw/JiZnpSWdN8Ix/auMlxdaBAD816VLzHBBZDoW8QkKcJejeFf+vseNhEnV4/J+t2gCVLw+903yKe4TuE9S81RbT9ZXeIhK7/pZXZP4aYzJpR2mQvtoHot+6FnzO7MY/mozHoG3L9hIHAm56hYrN3Y2vGixRu5P7WL6b7PhdD4SSPVTTE2il8gX6XrdezRLTPq4HAXLUA6wNlWhvUdBP25iaKgFQc0qGSg6Nkzjy8TA1WKnqijB986Cj1qo2wF0E8BxXNT6tKCn7pKggXG9sEV4b5NYCUeVbCsL5IQboGFRV/qWOUquzprd+rTKThqaLYrhWs+VoFbt6E0rCiJvBbkgodn4r0l3IgMq8vdVaKtezm5KiAuFaQEU09g8YTBHJrbYBZBe1SaejlzfJLqcOwH7+ZBaU3brJ5K3+zoBIc+xlYX9NfJP4t4dvDfPcJHlwjuo9S9ByBo7d4w6OWCH71lGQt3uJ6xF5TwH/Gw1dcbcfgsmf8NQDMjLNgbegY98MlBNcGkJxq7r/FXbuHYLH8NcCBzPLFuOuO6z3Y4cqm6oLGKyBcoOEDOG0yuShzeTuJOsDazTekKfoDgy1P31EHSYT7jNtp2ELI9QafpAgF16ndv+VSPnxHiYfxcfz2P/QfzIMsZc7T+KXO8Pz/CBaWJkowxOpW10FPMcHhzbXF4EhrRDeVU3IuO50dJRgATlvThQERbz7XhQTUG41YuO/0XLDkhZJkoKzGXqBP/rvozNXrnso3pl7RqLzM48eGaRVhRVRSsH/EGXEqVVZ1z8yv/G+2Gbszbp0wl1MVb6lj/Id28CRC04/Igegr/cU/1immRuyJf/yavF9hsh7qjp/RPqDuAwKvONmIMwOUHQ/F3vENoInDT
     
    #- name: SONARQUBE
    #  type: params
    #  versionTemplate:
    #    params:
    #      secure: QJWVnuzyig93enX3DE2CX9LntyTMOxsnOv2P+oFhU4+4gIm+9WCkk9O3TTDgTp5T5bS2qdQ0tkYJUDoTbT+mrAcIM1+PPPHicMppaUZPOq7w3gzsY5ekt9diKp9X840Z5TUrxi/j2WkT+R15weuxaD4oqfrLmw2nFvUhj6btmOzQMjg3Zc1yVbtAnT3tRle5t3cboQWA/VKg7NK1X61xfCY51KeXwak68uevVj0TBjdHY6jpQdI8Drw/LVXS5tMigc9O+l5jad1a02CORPp37Ujx5qd1vQU5IXdVVdgTYG7BPXCOzZZO4XBMvrby7Zs5gYiBxibWrjP6ccCydJFiSw==

    #- name: SRCREPO
    #  type: params
    #  versionTemplate:
    #    params:
    #      secure: PLOZuiTlzdH8EWNrIy1DZ/oTM4etr8WEWLd8yY659FDu5dbtfM2TW9FEM/9gkGjfH6s5Ka6TWU5g2Z1m47GtQKuTAP3mDNsxmhxgvQvLAJ+cQ1vD0vs9dvTlkacMtL5dInjZRBwpENynqG5FfsvZcjGBaMoQdkkbUsL59XHiAyrCeyZ05Q8ui8IWDFyfeuVLCz7qMoPe5TlYj/h6BlD4vMcbeNlMs9Xih/x1ruXq5FFAuPI1UEJi7ZtB6KP2tI6iJV0fystlmga6IYAQCTjRpj6DyEvA0dx1Jbygm3FbCFsF1wn1GLhVJWM8saqYlDZeFKB4/LdJJ7fNvvAFnzvS3Q==
    
    # Job resources
    - name: scripts-from-srcRepo
      type: gitRepo
      integration: GitHub
      versionTemplate:
        sourceName: "JP-L/jdemo"
        branch: "releases"
    
    - name: jdemoImg
      type: image
      integration: AWS-EIS
      versionTemplate:
        sourceName: $IMAGE_REPOSITORY
        versionName: $IMAGE_VERSION
        
    - name: jdemoImgQA
      type: image
      integration: AWS-EIS
      versionTemplate:
        sourceName: $IMAGE_REPOSITORY
        versionName: $IMAGE_VERSION

     # Docker options
    - name: dockerOptions
      type: dockerOptions
      versionTemplate:
        memory: 1024                        #in MiB
        #cpuShares: 10
        portMappings:
            - "8080:8080/tcp"
        logConfig:
            type: awslogs
            options:
              awslogs-group: /var/log/docker
              awslogs-region: eu-central-1
              awslogs-stream-prefix: jdemo
        privileged: false                     # May be true or false

    # Number of replicas
    - name: replicas
      type: replicas
      versionTemplate:
        count: 1
        
    # Cluster
    - name: EUC1-QA-cluster
      type: cluster
      integration: AWS-EIS
      versionTemplate:
        sourceName: oz-qa-cluster
        region: eu-central-1
    
    # Elastic Loadbalancers
    - name: EUC1-ELB-QA-cluster
      type: loadBalancer
      versionTemplate:
        sourceName: $ARN
        method: application

   #### INTEGRATIONS ####
    - name: aws-CIS-Integration
      type: integration
      integration: AWS-CIS

    - name: aws-cliConfig
      type: cliConfig
      integration: AWS-EIS
      versionTemplate:
        region: eu-central-1
        
    - name: Sonar
      type: integration
      integration: Sonar
      
    - name: BRep
      type: integration
      integration: BRep

    - name: SRep
      type: integration
      integration: SRep
      
    #### NOTIFICATIONS ####
    - name: Slack
      type: notification
      integration: Slack
      versionTemplate:
        recipients:
            - "#jdemo"

#### END RESOURCES CONFIG

#### JOBS CONFIG (GLOBAL ACROSS SUBSCRIPTION)
# ****************************************************************************************************************
# * Build Release branch after successful merge from Development branch                                          *
# *                    ------------- Then ------------------------------>                                        *
# *                                   A. Create a Manifest                                                       *
# *                                   B. setup Staging environment                                               *
# *                                   ------------- Then ------------------------------>                         *
# *                                                 C. Deploy Image                                              *
# *                                                 D. Run QA tests                                              *
# *                                                 E. Merge Release branch into Master branch                   *
# *                                                 ------------- Then ------------------------------>           *
# *                                                               F. Build Master branch                         *
# *                                                               G. Publish to DockerHub after successful build *
# ****************************************************************************************************************

jobs:
    # ****************************************************************************************************************
    # * Build Release branch after successful merge from Development branch                                          *
    # *                    ------------- Then ------------------------------>                                        *
    # *                                   A. Create a Manifest                                                       *
    # *                                   B. setup Staging environment                                               *
    # ****************************************************************************************************************
    - name: jdemo_runCI
      type: runCI
      steps:
        - IN: CI_CONTAINER
        - IN: CI_CONTAINER_VERSION
        - IN: IMAGE
        - IN: IMAGE_VERSION
        - OUT: jdemoImg
        - OUT: jdemoImgQA
        
    - name: jdemoManifest
      type: manifest
      dependencyMode: strict   # optional
      flags:
        - jdemo
      steps:
        - IN: jdemoImg
        - IN: dockerOptions
        - IN: replicas

    - name: jdemoManifestQA
      type: manifest
      dependencyMode: strict   # optional
      flags:
        - jdemo
      steps:
        - IN: jdemoImgQA
        - IN: dockerOptions
        - IN: replicas
        
    - name: configureStagingEnvironment
      type: runSh
      triggerMode: serial
      dependencyMode: strict   # optional
      on_start:
        - NOTIFY: Slack
      steps:
        - IN: jdemo_runCI
        - IN: CI_CONTAINER
        - IN: CI_CONTAINER_VERSION
        - IN: Sonar
        - IN: BRep
        - IN: SRep
        - IN: IMAGE
        - IN: IMAGE_VERSION
        - IN: scripts-from-srcRepo
        - IN: aws-CIS-Integration
        - IN: aws-cliConfig
          scopes:
            - ecr
        - TASK:
            name: setupStagingEnvironment
            runtime:                  # optional
              options:
                imageName: $CI_CONTAINER
                imageTag: $CI_CONTAINER_VERSION
                pull: false
                options: '--privileged=false --net=bridge -e FOO=true -e BOO=false'
            script:
              - echo "==== DEBUG List all environment variables ====" && printenv
              - echo "==== Prepare container environment ====" &&
                mkdir -p $HOME/.gradle &&
                cp IN/scripts-from-srcRepo/gitRepo/bas/resources/gradle/gradle.properties $HOME/.gradle/ &&
                sed -i -r "s|BURL|$BINREPO_URL|g" $HOME/.gradle/gradle.properties &&
                sed -i -r "s|REG_URL|$BINREPO_REGURL|g" $HOME/.gradle/gradle.properties &&
                sed -i -r "s|USR|$BINREPO_USR|g" $HOME/.gradle/gradle.properties &&
                sed -i -r "s|PWD|$BINREPO_PWD|g" $HOME/.gradle/gradle.properties &&
                sed -i -r "s|EMAIL|$BINREPO_EMAIL|g" $HOME/.gradle/gradle.properties &&

                sed -i -r "s|SONAR_URL|$SONAR_URL|g" $HOME/.gradle/gradle.properties &&
                sed -i -r "s|ORG|$ORGANIZATION|g" $HOME/.gradle/gradle.properties &&
                sed -i -r "s|SONAR_KEY|$SONAR_KEY|g" $HOME/.gradle/gradle.properties &&
      
                sed -i -r "s|SRCREPO_KEY|$SRCREPO_USR|g" $HOME/.gradle/gradle.properties &&
      
                sed -i -r "s|MY_ACCESS_ID|$AMAZONKEYS_ACCESSKEY|g" $HOME/.gradle/gradle.properties && 
                sed -i -r "s|MY_SECRET|$AMAZONKEYS_SECRETKEY|g" $HOME/.gradle/gradle.properties &&
                
                sed -i -r "s|TF_ACCESS_ID|$AMAZONKEYS_SECRETKEY|g" $HOME/.gradle/gradle.properties &&
                sed -i -r "s|TF_SECRET|$AMAZONKEYS_SECRETKEY|g" $HOME/.gradle/gradle.properties
              
              - echo "==== Configure testing environment for testing Alpha, Beta and RC release ====" &&
                cd $SCRIPTSFROMSRCREPO_STATE &&
                gradle planTerraform &&
                ls -al tf-temp/ &&
                gradle showTerraform
              - echo "==== TODO TODO TODO TODO ===="
              - terraform output | grep $REGION | cut -d'=' -f 2- | sed -e 's/^[ \t]*//'
              - ARN=$(terraform output | grep $REGION | cut -d'=' -f 2- | sed -e 's/^[ \t]*//')
              - shipctl put_resource_state EUC1-ELB-QA-cluster sourceName $ARN
      on_failure:
        - NOTIFY: Slack

     # ****************************************************************************************************************
     # *                                   ------------- Then ------------------------------>                         *
     # *                                                 C. Deploy Image                                              *
     # *                                                 D. Run QA tests                                              *
     # *                                                 E. Merge Release branch into Master branch                   *
     # ****************************************************************************************************************
    - name: deployImage-EUC1
      type: deploy
      dependencyMode: strict   # optional
      method: replace
      on_start:
        - NOTIFY: Slack
      flags:
       - jdemo
      steps: 
        - IN: jdemoManifestQA    # manifest
        - IN: configureStagingEnvironment
        - IN: EUC1-QA-cluster
        #- IN: elbQA
        #  applyTo:
        #    - manifest: jdemoManifest
        #      image: jdemo
        #      port: 8080
      on_failure:
        - NOTIFY: Slack

    - name: genericRunQATests
      type: runSh
      dependencyMode: strict   # optional
      on_start:
        - NOTIFY: Slack
      steps:
        - IN: deployImage-EUC1
          switch: off
        - IN: aws-cliConfig
          scopes:
            - ecr
        - TASK:
            name: runQATests
            runtime:                  # optional
              options:
                imageName: $CI_CONTAINER
                imageTag: $CI_CONTAINER_VERSION
                pull: false
                options: '--privileged=false --net=bridge -e FOO=true -e BOO=false'
            script:
              - echo "==== TODO TODO TODO TODO ===="
              - echo "==== Prepare container environment ====" &&
                mkdir -p $HOME/.gradle &&
                cp IN/scripts-from-srcRepo/gitRepo/bas/resources/gradle/gradle.properties $HOME/.gradle/ &&
                printenv | grep BINREPO_PROP | cut -d'=' -f 2- | tr '|' '\n' >> $HOME/.gradle/gradle.properties &&
                printenv | grep SRCREPO_PROP | cut -d'=' -f 2- | tr '|' '\n' >> $HOME/.gradle/gradle.properties
              - echo "==== run tests for testing Alpha release ====" &&
                gradle -v
              - echo "==== set Beta release on success ====" &&
                gradle releaseBeta
              - echo "==== run tests for testing Beta release ====" &&
                gradle -v
              - echo "==== set RC release on success ====" &&
                gradle releaseCandidate
              - echo "==== run RC tests if any ===="
              - echo "==== clean up deployed image and test env ===="
              - echo "==== Release the next version ====" &&
                gradle releaseVersion
              - echo "==== TODO TODO TODO TODO ===="
      on_failure:
        - NOTIFY: Slack

    - name: verify
      type: runSh
      dependencyMode: strict   # optional
      on_start:
        - NOTIFY: Slack
      steps:
        - IN: jdemoManifest
          switch: off
        - IN: aws-cliConfig
          scopes:
            - ecr
        - TASK:
            name: pullCustomImage
            script:
              #- docker pull $CI_CONTAINER:$CI_CONTAINER_VERSION
              - docker pull drydock/u16javall:v6.1.4
        - TASK:
            name: checkHealth
            runtime:                  # optional
              options:
                #imageName: $CI_CONTAINER
                imageName: drydock/u16javall
                imageTag: 'v6.1.4' #'1.0'
                pull: false
                options: '--privileged=false --net=bridge -e FOO=true -e BOO=false'
            script:
              - echo "==== TODO TODO TODO TODO ===="
      on_failure:
        - NOTIFY: Slack
        
#### END JOBS CONFIG